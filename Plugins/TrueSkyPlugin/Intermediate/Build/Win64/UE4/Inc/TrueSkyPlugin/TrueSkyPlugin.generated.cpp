// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/TrueSkyPluginPrivatePCH.h"
#include "TrueSkyPlugin.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1TrueSkyPlugin() {}
	void UTrueSkyComponent::StaticRegisterNativesUTrueSkyComponent()
	{
	}
	IMPLEMENT_CLASS(UTrueSkyComponent, 3692935609);
	void ATrueSkyLight::StaticRegisterNativesATrueSkyLight()
	{
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkyLight::StaticClass(), "OnRep_bEnabled",(Native)&ATrueSkyLight::execOnRep_bEnabled);
	}
	IMPLEMENT_CLASS(ATrueSkyLight, 1947172579);
	void UTrueSkyLightComponent::StaticRegisterNativesUTrueSkyLightComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UTrueSkyLightComponent::StaticClass(), "RecaptureSky",(Native)&UTrueSkyLightComponent::execRecaptureSky);
	}
	IMPLEMENT_CLASS(UTrueSkyLightComponent, 2380429725);
static class UEnum* PrecipitationOptionsEnum_StaticEnum()
{
	extern TRUESKYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_TrueSkyPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern TRUESKYPLUGIN_API class UEnum* Z_Construct_UEnum_TrueSkyPlugin_PrecipitationOptionsEnum();
		Singleton = GetStaticEnum(Z_Construct_UEnum_TrueSkyPlugin_PrecipitationOptionsEnum, Z_Construct_UPackage__Script_TrueSkyPlugin(), TEXT("PrecipitationOptionsEnum"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_PrecipitationOptionsEnum(PrecipitationOptionsEnum_StaticEnum, TEXT("/Script/TrueSkyPlugin"), TEXT("PrecipitationOptionsEnum"), false, nullptr, nullptr);
static class UEnum* EInterpolationMode_StaticEnum()
{
	extern TRUESKYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_TrueSkyPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern TRUESKYPLUGIN_API class UEnum* Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode, Z_Construct_UPackage__Script_TrueSkyPlugin(), TEXT("EInterpolationMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EInterpolationMode(EInterpolationMode_StaticEnum, TEXT("/Script/TrueSkyPlugin"), TEXT("EInterpolationMode"), false, nullptr, nullptr);
	void ATrueSkySequenceActor::StaticRegisterNativesATrueSkySequenceActor()
	{
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "CloudLineTest",(Native)&ATrueSkySequenceActor::execCloudLineTest);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "CloudPointTest",(Native)&ATrueSkySequenceActor::execCloudPointTest);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetCloudKeyframeByIndex",(Native)&ATrueSkySequenceActor::execGetCloudKeyframeByIndex);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetCloudShadowAtPosition",(Native)&ATrueSkySequenceActor::execGetCloudShadowAtPosition);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetFloat",(Native)&ATrueSkySequenceActor::execGetFloat);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetFloatAtPosition",(Native)&ATrueSkySequenceActor::execGetFloatAtPosition);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetInt",(Native)&ATrueSkySequenceActor::execGetInt);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetInterpolatedCloudKeyframe",(Native)&ATrueSkySequenceActor::execGetInterpolatedCloudKeyframe);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetInterpolatedSkyKeyframe",(Native)&ATrueSkySequenceActor::execGetInterpolatedSkyKeyframe);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetKeyframeFloat",(Native)&ATrueSkySequenceActor::execGetKeyframeFloat);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetKeyframeInt",(Native)&ATrueSkySequenceActor::execGetKeyframeInt);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetLightning",(Native)&ATrueSkySequenceActor::execGetLightning);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetMetresPerUnit",(Native)&ATrueSkySequenceActor::execGetMetresPerUnit);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetMoonColor",(Native)&ATrueSkySequenceActor::execGetMoonColor);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetMoonIntensity",(Native)&ATrueSkySequenceActor::execGetMoonIntensity);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetMoonRotation",(Native)&ATrueSkySequenceActor::execGetMoonRotation);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetNextCloudKeyframeAfterTime",(Native)&ATrueSkySequenceActor::execGetNextCloudKeyframeAfterTime);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetNextModifiableCloudKeyframe",(Native)&ATrueSkySequenceActor::execGetNextModifiableCloudKeyframe);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetNextModifiableSkyKeyframe",(Native)&ATrueSkySequenceActor::execGetNextModifiableSkyKeyframe);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetNextSkyKeyframeAfterTime",(Native)&ATrueSkySequenceActor::execGetNextSkyKeyframeAfterTime);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetPreviousCloudKeyframeBeforeTime",(Native)&ATrueSkySequenceActor::execGetPreviousCloudKeyframeBeforeTime);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetPreviousSkyKeyframeBeforeTime",(Native)&ATrueSkySequenceActor::execGetPreviousSkyKeyframeBeforeTime);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetProfilingText",(Native)&ATrueSkySequenceActor::execGetProfilingText);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetRainAtPosition",(Native)&ATrueSkySequenceActor::execGetRainAtPosition);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetReferenceSpectralRadiance",(Native)&ATrueSkySequenceActor::execGetReferenceSpectralRadiance);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetSkyKeyframeByIndex",(Native)&ATrueSkySequenceActor::execGetSkyKeyframeByIndex);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetSunColor",(Native)&ATrueSkySequenceActor::execGetSunColor);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetSunIntensity",(Native)&ATrueSkySequenceActor::execGetSunIntensity);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetSunRotation",(Native)&ATrueSkySequenceActor::execGetSunRotation);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "GetTime",(Native)&ATrueSkySequenceActor::execGetTime);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetBool",(Native)&ATrueSkySequenceActor::execSetBool);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetFloat",(Native)&ATrueSkySequenceActor::execSetFloat);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetInt",(Native)&ATrueSkySequenceActor::execSetInt);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetKeyframeFloat",(Native)&ATrueSkySequenceActor::execSetKeyframeFloat);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetKeyframeInt",(Native)&ATrueSkySequenceActor::execSetKeyframeInt);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetMoonRotation",(Native)&ATrueSkySequenceActor::execSetMoonRotation);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetPointLight",(Native)&ATrueSkySequenceActor::execSetPointLight);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetPointLightSource",(Native)&ATrueSkySequenceActor::execSetPointLightSource);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetSunRotation",(Native)&ATrueSkySequenceActor::execSetSunRotation);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SetTime",(Native)&ATrueSkySequenceActor::execSetTime);
		FNativeFunctionRegistrar::RegisterFunction(ATrueSkySequenceActor::StaticClass(), "SpawnLightning",(Native)&ATrueSkySequenceActor::execSpawnLightning);
	}
	IMPLEMENT_CLASS(ATrueSkySequenceActor, 338698087);
	void UTrueSkySequenceAsset::StaticRegisterNativesUTrueSkySequenceAsset()
	{
	}
	IMPLEMENT_CLASS(UTrueSkySequenceAsset, 370765409);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent();
	ENGINE_API class UClass* Z_Construct_UClass_AInfo();
	ENGINE_API class UClass* Z_Construct_UClass_USkyLightComponent();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FRotator();
	ENGINE_API class UClass* Z_Construct_UClass_APointLight_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_USoundAttenuation_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USoundBase_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTextureRenderTarget2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();

	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_UTrueSkyComponent_NoRegister();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_UTrueSkyComponent();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkyLight_OnRep_bEnabled();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_ATrueSkyLight_NoRegister();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_ATrueSkyLight();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_UTrueSkyLightComponent_RecaptureSky();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_UTrueSkyLightComponent_NoRegister();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_UTrueSkyLightComponent();
	TRUESKYPLUGIN_API class UEnum* Z_Construct_UEnum_TrueSkyPlugin_PrecipitationOptionsEnum();
	TRUESKYPLUGIN_API class UEnum* Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_CloudLineTest();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_CloudPointTest();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudKeyframeByIndex();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudShadowAtPosition();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetFloat();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetFloatAtPosition();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetInt();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedCloudKeyframe();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedSkyKeyframe();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeFloat();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeInt();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetLightning();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMetresPerUnit();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonColor();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonIntensity();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonRotation();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextCloudKeyframeAfterTime();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableCloudKeyframe();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableSkyKeyframe();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextSkyKeyframeAfterTime();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousCloudKeyframeBeforeTime();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousSkyKeyframeBeforeTime();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetProfilingText();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetRainAtPosition();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetReferenceSpectralRadiance();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSkyKeyframeByIndex();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSunColor();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSunIntensity();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSunRotation();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetTime();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetBool();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetFloat();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetInt();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeFloat();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeInt();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetMoonRotation();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLight();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLightSource();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetSunRotation();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetTime();
	TRUESKYPLUGIN_API class UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SpawnLightning();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_ATrueSkySequenceActor_NoRegister();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_ATrueSkySequenceActor();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_UTrueSkySequenceAsset_NoRegister();
	TRUESKYPLUGIN_API class UClass* Z_Construct_UClass_UTrueSkySequenceAsset();
	TRUESKYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_TrueSkyPlugin();
	UClass* Z_Construct_UClass_UTrueSkyComponent_NoRegister()
	{
		return UTrueSkyComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UTrueSkyComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USceneComponent();
			Z_Construct_UPackage__Script_TrueSkyPlugin();
			OuterClass = UTrueSkyComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;


				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Rendering"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object ActorComponent Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TrueSkyComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkyComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTrueSkyComponent(Z_Construct_UClass_UTrueSkyComponent, &UTrueSkyComponent::StaticClass, TEXT("UTrueSkyComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTrueSkyComponent);
	UFunction* Z_Construct_UFunction_ATrueSkyLight_OnRep_bEnabled()
	{
		UObject* Outer=Z_Construct_UClass_ATrueSkyLight();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OnRep_bEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00020400, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkyLight.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Replication Notification Callbacks"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ATrueSkyLight_NoRegister()
	{
		return ATrueSkyLight::StaticClass();
	}
	UClass* Z_Construct_UClass_ATrueSkyLight()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AInfo();
			Z_Construct_UPackage__Script_TrueSkyPlugin();
			OuterClass = ATrueSkyLight::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;

				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkyLight_OnRep_bEnabled());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnabled, ATrueSkyLight, uint8);
				UProperty* NewProp_bEnabled = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnabled"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnabled, ATrueSkyLight), 0x0010000100000020, CPP_BOOL_PROPERTY_BITMASK(bEnabled, ATrueSkyLight), sizeof(uint8), false);
				NewProp_bEnabled->RepNotifyFunc = FName(TEXT("OnRep_bEnabled"));
				UProperty* NewProp_LightComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LightComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LightComponent, ATrueSkyLight), 0x00100000000a001d, Z_Construct_UClass_UTrueSkyLightComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkyLight_OnRep_bEnabled(), "OnRep_bEnabled"); // 2232626233
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Lights"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Collision Replication Info Input Movement Collision Utilities|Transformation"));
				MetaData->SetValue(OuterClass, TEXT("IgnoreCategoryKeywordsInSubclasses"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TrueSkyLight.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IsConversionRoot"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkyLight.h"));
				MetaData->SetValue(OuterClass, TEXT("ShowCategories"), TEXT("Input|MouseInput Input|TouchInput"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkyLight.h"));
				MetaData->SetValue(NewProp_bEnabled, TEXT("ToolTip"), TEXT("replicated copy of LightComponent's bEnabled property"));
				MetaData->SetValue(NewProp_LightComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_LightComponent, TEXT("Category"), TEXT("Light"));
				MetaData->SetValue(NewProp_LightComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_LightComponent, TEXT("ExposeFunctionCategories"), TEXT("Light,Rendering,Rendering|Components|SkyLight"));
				MetaData->SetValue(NewProp_LightComponent, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkyLight.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ATrueSkyLight(Z_Construct_UClass_ATrueSkyLight, &ATrueSkyLight::StaticClass, TEXT("ATrueSkyLight"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ATrueSkyLight);
	UFunction* Z_Construct_UFunction_UTrueSkyLightComponent_RecaptureSky()
	{
		UObject* Outer=Z_Construct_UClass_UTrueSkyLightComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RecaptureSky"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Rendering|Components|SkyLight"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkyLightComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Recaptures the scene for the skylight.\nThis is useful for making sure the sky light is up to date after changing something in the world that it would capture.\nWarning: this is very costly and will definitely cause a hitch."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTrueSkyLightComponent_NoRegister()
	{
		return UTrueSkyLightComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UTrueSkyLightComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USkyLightComponent();
			Z_Construct_UPackage__Script_TrueSkyPlugin();
			OuterClass = UTrueSkyLightComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTrueSkyLightComponent_RecaptureSky());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrueSkyLightComponent_RecaptureSky(), "RecaptureSky"); // 3061814715
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Lights"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Trigger Activation Components|Activation Physics Trigger Activation Components|Activation Physics Trigger Activation Components|Activation Physics Trigger PhysicsVolume ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TrueSkyLightComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkyLightComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTrueSkyLightComponent(Z_Construct_UClass_UTrueSkyLightComponent, &UTrueSkyLightComponent::StaticClass, TEXT("UTrueSkyLightComponent"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTrueSkyLightComponent);
	UEnum* Z_Construct_UEnum_TrueSkyPlugin_PrecipitationOptionsEnum()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_TrueSkyPlugin();
		extern uint32 Get_Z_Construct_UEnum_TrueSkyPlugin_PrecipitationOptionsEnum_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("PrecipitationOptionsEnum"), 0, Get_Z_Construct_UEnum_TrueSkyPlugin_PrecipitationOptionsEnum_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("PrecipitationOptionsEnum"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrecipitationOptionsEnum::None")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrecipitationOptionsEnum::VelocityStreaks")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrecipitationOptionsEnum::SimulationTime")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("PrecipitationOptionsEnum::PrecipitationOptionsEnum_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("PrecipitationOptionsEnum");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_TrueSkyPlugin_PrecipitationOptionsEnum_CRC() { return 3097082745U; }
	UEnum* Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_TrueSkyPlugin();
		extern uint32 Get_Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EInterpolationMode"), 0, Get_Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EInterpolationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationMode::FixedNumber")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationMode::RealTime")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EInterpolationMode::EInterpolationMode_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("EInterpolationMode");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode_CRC() { return 996401720U; }
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_CloudLineTest()
	{
		struct TrueSkySequenceActor_eventCloudLineTest_Parms
		{
			int32 queryId;
			FVector StartPos;
			FVector EndPos;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloudLineTest"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TrueSkySequenceActor_eventCloudLineTest_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventCloudLineTest_Parms), 0x0010000000000580);
			UProperty* NewProp_EndPos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("EndPos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(EndPos, TrueSkySequenceActor_eventCloudLineTest_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_StartPos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("StartPos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(StartPos, TrueSkySequenceActor_eventCloudLineTest_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_queryId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("queryId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(queryId, TrueSkySequenceActor_eventCloudLineTest_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the amount of cloud at the given position."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_CloudPointTest()
	{
		struct TrueSkySequenceActor_eventCloudPointTest_Parms
		{
			int32 QueryId;
			FVector pos;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CloudPointTest"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TrueSkySequenceActor_eventCloudPointTest_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventCloudPointTest_Parms), 0x0010000000000580);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pos, TrueSkySequenceActor_eventCloudPointTest_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_QueryId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(QueryId, TrueSkySequenceActor_eventCloudPointTest_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the amount of cloud at the given position."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudKeyframeByIndex()
	{
		struct TrueSkySequenceActor_eventGetCloudKeyframeByIndex_Parms
		{
			int32 layer;
			int32 index;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCloudKeyframeByIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetCloudKeyframeByIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetCloudKeyframeByIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(index, TrueSkySequenceActor_eventGetCloudKeyframeByIndex_Parms), 0x0010000000000080);
			UProperty* NewProp_layer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(layer, TrueSkySequenceActor_eventGetCloudKeyframeByIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the cloud keyframe at the specified index. Returns zero if there is none at that index (e.g. you have gone past the end of the list)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudShadowAtPosition()
	{
		struct TrueSkySequenceActor_eventGetCloudShadowAtPosition_Parms
		{
			int32 QueryId;
			FVector pos;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCloudShadowAtPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TrueSkySequenceActor_eventGetCloudShadowAtPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetCloudShadowAtPosition_Parms), 0x0010000000000580);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pos, TrueSkySequenceActor_eventGetCloudShadowAtPosition_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_QueryId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(QueryId, TrueSkySequenceActor_eventGetCloudShadowAtPosition_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the cloud shadow at the given position, from 0 to 1."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetFloat()
	{
		struct TrueSkySequenceActor_eventGetFloat_Parms
		{
			FString name;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TrueSkySequenceActor_eventGetFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventGetFloat_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the named floating-point property."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetFloatAtPosition()
	{
		struct TrueSkySequenceActor_eventGetFloatAtPosition_Parms
		{
			FString name;
			FVector pos;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFloatAtPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(TrueSkySequenceActor_eventGetFloatAtPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetFloatAtPosition_Parms), 0x0010000000000580);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pos, TrueSkySequenceActor_eventGetFloatAtPosition_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventGetFloatAtPosition_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the named floating-point property."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetInt()
	{
		struct TrueSkySequenceActor_eventGetInt_Parms
		{
			FString name;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetInt_Parms), 0x0010000000000580);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventGetInt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the named integer property."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedCloudKeyframe()
	{
		struct TrueSkySequenceActor_eventGetInterpolatedCloudKeyframe_Parms
		{
			int32 layer;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInterpolatedCloudKeyframe"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetInterpolatedCloudKeyframe_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetInterpolatedCloudKeyframe_Parms), 0x0010000000000580);
			UProperty* NewProp_layer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(layer, TrueSkySequenceActor_eventGetInterpolatedCloudKeyframe_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an indentifier for the interpolated cloud keyframe"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedSkyKeyframe()
	{
		struct TrueSkySequenceActor_eventGetInterpolatedSkyKeyframe_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInterpolatedSkyKeyframe"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetInterpolatedSkyKeyframe_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetInterpolatedSkyKeyframe_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an indentifier for the interpolated sky keyframe"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeFloat()
	{
		struct TrueSkySequenceActor_eventGetKeyframeFloat_Parms
		{
			int32 keyframeUid;
			FString name;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetKeyframeFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetKeyframeFloat_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetKeyframeFloat_Parms), 0x0010000000000580);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventGetKeyframeFloat_Parms), 0x0010000000000080);
			UProperty* NewProp_keyframeUid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("keyframeUid"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(keyframeUid, TrueSkySequenceActor_eventGetKeyframeFloat_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the named keyframe property for the keyframe identified."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeInt()
	{
		struct TrueSkySequenceActor_eventGetKeyframeInt_Parms
		{
			int32 keyframeUid;
			FString name;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetKeyframeInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetKeyframeInt_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetKeyframeInt_Parms), 0x0010000000000580);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventGetKeyframeInt_Parms), 0x0010000000000080);
			UProperty* NewProp_keyframeUid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("keyframeUid"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(keyframeUid, TrueSkySequenceActor_eventGetKeyframeInt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the named integer keyframe property for the keyframe identified."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetLightning()
	{
		struct TrueSkySequenceActor_eventGetLightning_Parms
		{
			FVector start;
			FVector end;
			float magnitude;
			FVector colour;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLightning"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(TrueSkySequenceActor_eventGetLightning_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetLightning_Parms), 0x0010000000000580);
			UProperty* NewProp_colour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("colour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(colour, TrueSkySequenceActor_eventGetLightning_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_magnitude = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitude"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(magnitude, TrueSkySequenceActor_eventGetLightning_Parms), 0x0010000000000180);
			UProperty* NewProp_end = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("end"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(end, TrueSkySequenceActor_eventGetLightning_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_start = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("start"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(start, TrueSkySequenceActor_eventGetLightning_Parms), 0x0010000000000180, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMetresPerUnit()
	{
		struct TrueSkySequenceActor_eventGetMetresPerUnit_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMetresPerUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TrueSkySequenceActor_eventGetMetresPerUnit_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetMetresPerUnit_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the Sequence Actor singleton."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonColor()
	{
		struct TrueSkySequenceActor_eventGetMoonColor_Parms
		{
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMoonColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TrueSkySequenceActor_eventGetMoonColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetMoonColor_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the calculated moon colour in irradiance units, divided by intensity."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonIntensity()
	{
		struct TrueSkySequenceActor_eventGetMoonIntensity_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMoonIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TrueSkySequenceActor_eventGetMoonIntensity_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetMoonIntensity_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the calculated moon intensity in irradiance units."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonRotation()
	{
		struct TrueSkySequenceActor_eventGetMoonRotation_Parms
		{
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMoonRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TrueSkySequenceActor_eventGetMoonRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetMoonRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the calculated moon direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextCloudKeyframeAfterTime()
	{
		struct TrueSkySequenceActor_eventGetNextCloudKeyframeAfterTime_Parms
		{
			int32 layer;
			float t;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNextCloudKeyframeAfterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetNextCloudKeyframeAfterTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetNextCloudKeyframeAfterTime_Parms), 0x0010000000000580);
			UProperty* NewProp_t = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("t"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(t, TrueSkySequenceActor_eventGetNextCloudKeyframeAfterTime_Parms), 0x0010000000000080);
			UProperty* NewProp_layer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(layer, TrueSkySequenceActor_eventGetNextCloudKeyframeAfterTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the next cloud keyframe at or after the specified time."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableCloudKeyframe()
	{
		struct TrueSkySequenceActor_eventGetNextModifiableCloudKeyframe_Parms
		{
			int32 layer;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNextModifiableCloudKeyframe"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetNextModifiableCloudKeyframe_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetNextModifiableCloudKeyframe_Parms), 0x0010000000000580);
			UProperty* NewProp_layer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(layer, TrueSkySequenceActor_eventGetNextModifiableCloudKeyframe_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the next cloud keyframe that can be altered without requiring a recalculation of the 3D textures."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableSkyKeyframe()
	{
		struct TrueSkySequenceActor_eventGetNextModifiableSkyKeyframe_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNextModifiableSkyKeyframe"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetNextModifiableSkyKeyframe_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetNextModifiableSkyKeyframe_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the next sky keyframe that can be altered without requiring a recalculation of the tables."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetNextSkyKeyframeAfterTime()
	{
		struct TrueSkySequenceActor_eventGetNextSkyKeyframeAfterTime_Parms
		{
			float t;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNextSkyKeyframeAfterTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetNextSkyKeyframeAfterTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetNextSkyKeyframeAfterTime_Parms), 0x0010000000000580);
			UProperty* NewProp_t = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("t"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(t, TrueSkySequenceActor_eventGetNextSkyKeyframeAfterTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the next cloud keyframe at or after the specified time."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousCloudKeyframeBeforeTime()
	{
		struct TrueSkySequenceActor_eventGetPreviousCloudKeyframeBeforeTime_Parms
		{
			int32 layer;
			float t;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPreviousCloudKeyframeBeforeTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetPreviousCloudKeyframeBeforeTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetPreviousCloudKeyframeBeforeTime_Parms), 0x0010000000000580);
			UProperty* NewProp_t = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("t"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(t, TrueSkySequenceActor_eventGetPreviousCloudKeyframeBeforeTime_Parms), 0x0010000000000080);
			UProperty* NewProp_layer = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("layer"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(layer, TrueSkySequenceActor_eventGetPreviousCloudKeyframeBeforeTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the last cloud keyframe before the specified time."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousSkyKeyframeBeforeTime()
	{
		struct TrueSkySequenceActor_eventGetPreviousSkyKeyframeBeforeTime_Parms
		{
			float t;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetPreviousSkyKeyframeBeforeTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetPreviousSkyKeyframeBeforeTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetPreviousSkyKeyframeBeforeTime_Parms), 0x0010000000000580);
			UProperty* NewProp_t = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("t"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(t, TrueSkySequenceActor_eventGetPreviousSkyKeyframeBeforeTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the last sky keyframe before the specified time."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetProfilingText()
	{
		struct TrueSkySequenceActor_eventGetProfilingText_Parms
		{
			int32 cpu_level;
			int32 gpu_level;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetProfilingText"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetProfilingText_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetProfilingText_Parms), 0x0010000000000580);
			UProperty* NewProp_gpu_level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("gpu_level"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(gpu_level, TrueSkySequenceActor_eventGetProfilingText_Parms), 0x0010000000000080);
			UProperty* NewProp_cpu_level = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("cpu_level"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(cpu_level, TrueSkySequenceActor_eventGetProfilingText_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetRainAtPosition()
	{
		struct TrueSkySequenceActor_eventGetRainAtPosition_Parms
		{
			int32 QueryId;
			FVector pos;
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetRainAtPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TrueSkySequenceActor_eventGetRainAtPosition_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetRainAtPosition_Parms), 0x0010000000000580);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pos, TrueSkySequenceActor_eventGetRainAtPosition_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_QueryId = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("QueryId"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(QueryId, TrueSkySequenceActor_eventGetRainAtPosition_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the rainfall at the given position, from 0 to 1."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetReferenceSpectralRadiance()
	{
		struct TrueSkySequenceActor_eventGetReferenceSpectralRadiance_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetReferenceSpectralRadiance"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TrueSkySequenceActor_eventGetReferenceSpectralRadiance_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetReferenceSpectralRadiance_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the spectral radiance as a multiplier for colour values output by trueSKY.\n              For example, a pixel value of 1.0, with a reference radiance of 2.0, would represent 2 watts per square metre per steradian."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSkyKeyframeByIndex()
	{
		struct TrueSkySequenceActor_eventGetSkyKeyframeByIndex_Parms
		{
			int32 index;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSkyKeyframeByIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventGetSkyKeyframeByIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetSkyKeyframeByIndex_Parms), 0x0010000000000580);
			UProperty* NewProp_index = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("index"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(index, TrueSkySequenceActor_eventGetSkyKeyframeByIndex_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get an identifier for the sky keyframe at the specified index. Returns zero if there is none at that index (e.g. you have gone past the end of the list)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSunColor()
	{
		struct TrueSkySequenceActor_eventGetSunColor_Parms
		{
			FLinearColor ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSunColor"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TrueSkySequenceActor_eventGetSunColor_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetSunColor_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FLinearColor());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the calculated sun colour in irradiance units, divided by intensity."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSunIntensity()
	{
		struct TrueSkySequenceActor_eventGetSunIntensity_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSunIntensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TrueSkySequenceActor_eventGetSunIntensity_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetSunIntensity_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the calculated moon intensity in irradiance units."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetSunRotation()
	{
		struct TrueSkySequenceActor_eventGetSunRotation_Parms
		{
			FRotator ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetSunRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(TrueSkySequenceActor_eventGetSunRotation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetSunRotation_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the calculated sun direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_GetTime()
	{
		struct TrueSkySequenceActor_eventGetTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(TrueSkySequenceActor_eventGetTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventGetTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns the time value for trueSKY. By default, 0=midnight, 0.5=midday, 1.0= the following midnight, etc."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetBool()
	{
		struct TrueSkySequenceActor_eventSetBool_Parms
		{
			FString name;
			bool value;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBool"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventSetBool_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(value, TrueSkySequenceActor_eventSetBool_Parms, bool);
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(value, TrueSkySequenceActor_eventSetBool_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(value, TrueSkySequenceActor_eventSetBool_Parms), sizeof(bool), true);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventSetBool_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetFloat()
	{
		struct TrueSkySequenceActor_eventSetFloat_Parms
		{
			FString name;
			float value;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventSetFloat_Parms));
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(value, TrueSkySequenceActor_eventSetFloat_Parms), 0x0010000000000080);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventSetFloat_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the named floating-point property."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetInt()
	{
		struct TrueSkySequenceActor_eventSetInt_Parms
		{
			FString name;
			int32 value;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventSetInt_Parms));
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(value, TrueSkySequenceActor_eventSetInt_Parms), 0x0010000000000080);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventSetInt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the named integer property."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeFloat()
	{
		struct TrueSkySequenceActor_eventSetKeyframeFloat_Parms
		{
			int32 keyframeUid;
			FString name;
			float value;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetKeyframeFloat"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventSetKeyframeFloat_Parms));
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(value, TrueSkySequenceActor_eventSetKeyframeFloat_Parms), 0x0010000000000080);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventSetKeyframeFloat_Parms), 0x0010000000000080);
			UProperty* NewProp_keyframeUid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("keyframeUid"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(keyframeUid, TrueSkySequenceActor_eventSetKeyframeFloat_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the named keyframe property for the keyframe identified."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeInt()
	{
		struct TrueSkySequenceActor_eventSetKeyframeInt_Parms
		{
			int32 keyframeUid;
			FString name;
			int32 value;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetKeyframeInt"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventSetKeyframeInt_Parms));
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(value, TrueSkySequenceActor_eventSetKeyframeInt_Parms), 0x0010000000000080);
			UProperty* NewProp_name = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(name, TrueSkySequenceActor_eventSetKeyframeInt_Parms), 0x0010000000000080);
			UProperty* NewProp_keyframeUid = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("keyframeUid"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(keyframeUid, TrueSkySequenceActor_eventSetKeyframeInt_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set the named integer keyframe property for the keyframe identified."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetMoonRotation()
	{
		struct TrueSkySequenceActor_eventSetMoonRotation_Parms
		{
			FRotator r;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMoonRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TrueSkySequenceActor_eventSetMoonRotation_Parms));
			UProperty* NewProp_r = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("r"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(r, TrueSkySequenceActor_eventSetMoonRotation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Override the moon direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLight()
	{
		struct TrueSkySequenceActor_eventSetPointLight_Parms
		{
			APointLight* source;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPointLight"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventSetPointLight_Parms));
			UProperty* NewProp_source = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("source"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(source, TrueSkySequenceActor_eventSetPointLight_Parms), 0x0010000000000080, Z_Construct_UClass_APointLight_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Illuminate the clouds with the specified point light."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLightSource()
	{
		struct TrueSkySequenceActor_eventSetPointLightSource_Parms
		{
			int32 id;
			FLinearColor lightColour;
			float Intensity;
			FVector pos;
			float minRadius;
			float maxRadius;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetPointLightSource"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TrueSkySequenceActor_eventSetPointLightSource_Parms));
			UProperty* NewProp_maxRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("maxRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(maxRadius, TrueSkySequenceActor_eventSetPointLightSource_Parms), 0x0010000000000080);
			UProperty* NewProp_minRadius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("minRadius"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(minRadius, TrueSkySequenceActor_eventSetPointLightSource_Parms), 0x0010000000000080);
			UProperty* NewProp_pos = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pos, TrueSkySequenceActor_eventSetPointLightSource_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_Intensity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Intensity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Intensity, TrueSkySequenceActor_eventSetPointLightSource_Parms), 0x0010000000000080);
			UProperty* NewProp_lightColour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("lightColour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(lightColour, TrueSkySequenceActor_eventSetPointLightSource_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FLinearColor());
			UProperty* NewProp_id = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("id"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(id, TrueSkySequenceActor_eventSetPointLightSource_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Illuminate the clouds with the specified values from position pos."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetSunRotation()
	{
		struct TrueSkySequenceActor_eventSetSunRotation_Parms
		{
			FRotator r;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSunRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TrueSkySequenceActor_eventSetSunRotation_Parms));
			UProperty* NewProp_r = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("r"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(r, TrueSkySequenceActor_eventSetSunRotation_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FRotator());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Override the sun direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SetTime()
	{
		struct TrueSkySequenceActor_eventSetTime_Parms
		{
			float value;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(TrueSkySequenceActor_eventSetTime_Parms));
			UProperty* NewProp_value = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("value"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(value, TrueSkySequenceActor_eventSetTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Sets the time value for trueSKY. By default, 0=midnight, 0.5=midday, 1.0= the following midnight, etc."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ATrueSkySequenceActor_SpawnLightning()
	{
		struct TrueSkySequenceActor_eventSpawnLightning_Parms
		{
			FVector pos1;
			FVector pos2;
			float magnitude;
			FVector colour;
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ATrueSkySequenceActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpawnLightning"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04822401, 65535, sizeof(TrueSkySequenceActor_eventSpawnLightning_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrueSkySequenceActor_eventSpawnLightning_Parms), 0x0010000000000580);
			UProperty* NewProp_colour = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("colour"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(colour, TrueSkySequenceActor_eventSpawnLightning_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_magnitude = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("magnitude"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(magnitude, TrueSkySequenceActor_eventSpawnLightning_Parms), 0x0010000000000080);
			UProperty* NewProp_pos2 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos2"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pos2, TrueSkySequenceActor_eventSpawnLightning_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_pos1 = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("pos1"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(pos1, TrueSkySequenceActor_eventSpawnLightning_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("TrueSky"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ATrueSkySequenceActor_NoRegister()
	{
		return ATrueSkySequenceActor::StaticClass();
	}
	UClass* Z_Construct_UClass_ATrueSkySequenceActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_TrueSkyPlugin();
			OuterClass = ATrueSkySequenceActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20880084;

				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_CloudLineTest());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_CloudPointTest());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudKeyframeByIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudShadowAtPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetFloatAtPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetInt());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedCloudKeyframe());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedSkyKeyframe());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeInt());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetLightning());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetMetresPerUnit());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonColor());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonIntensity());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextCloudKeyframeAfterTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableCloudKeyframe());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableSkyKeyframe());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextSkyKeyframeAfterTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousCloudKeyframeBeforeTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousSkyKeyframeBeforeTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetProfilingText());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetRainAtPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetReferenceSpectralRadiance());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetSkyKeyframeByIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetSunColor());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetSunIntensity());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetSunRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_GetTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetBool());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetInt());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeFloat());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeInt());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetMoonRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLight());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLightSource());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetSunRotation());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SetTime());
				OuterClass->LinkChild(Z_Construct_UFunction_ATrueSkySequenceActor_SpawnLightning());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_ThunderAttenuation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ThunderAttenuation"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ThunderAttenuation, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_USoundAttenuation_NoRegister());
				UProperty* NewProp_ThunderSounds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ThunderSounds"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(ThunderSounds, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_ThunderSounds_Inner = new(EC_InternalUseOnlyConstructor, NewProp_ThunderSounds, TEXT("ThunderSounds"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_USoundBase_NoRegister());
				UProperty* NewProp_RainSound = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RainSound"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RainSound, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_USoundBase_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Visible, ATrueSkySequenceActor, bool);
				UProperty* NewProp_Visible = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Visible"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Visible, ATrueSkySequenceActor), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(Visible, ATrueSkySequenceActor), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ShareBuffersForVR, ATrueSkySequenceActor, bool);
				UProperty* NewProp_ShareBuffersForVR = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShareBuffersForVR"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ShareBuffersForVR, ATrueSkySequenceActor), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(ShareBuffersForVR, ATrueSkySequenceActor), sizeof(bool), true);
				UProperty* NewProp_MinimumStarPixelSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinimumStarPixelSize"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinimumStarPixelSize, ATrueSkySequenceActor), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(DepthBlending, ATrueSkySequenceActor, bool);
				UProperty* NewProp_DepthBlending = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DepthBlending"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(DepthBlending, ATrueSkySequenceActor), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(DepthBlending, ATrueSkySequenceActor), sizeof(bool), true);
				UProperty* NewProp_AtmosphericsAmortization = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AtmosphericsAmortization"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(AtmosphericsAmortization, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_Amortization = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Amortization"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(Amortization, ATrueSkySequenceActor), 0x0010000000004005);
				UProperty* NewProp_DepthSamplingPixelRange = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DepthSamplingPixelRange"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DepthSamplingPixelRange, ATrueSkySequenceActor), 0x0010000000004005);
				UProperty* NewProp_MaximumResolution = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaximumResolution"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(MaximumResolution, ATrueSkySequenceActor), 0x0010000000004005);
				UProperty* NewProp_DownscaleFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DownscaleFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UIntProperty(CPP_PROPERTY_BASE(DownscaleFactor, ATrueSkySequenceActor), 0x0010000000004005);
				UProperty* NewProp_CloudThresholdDistanceKm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CloudThresholdDistanceKm"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CloudThresholdDistanceKm, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_SimpleCloudShadowSharpness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SimpleCloudShadowSharpness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SimpleCloudShadowSharpness, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_SimpleCloudShadowing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SimpleCloudShadowing"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SimpleCloudShadowing, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_MetresPerUnit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MetresPerUnit"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MetresPerUnit, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_Brightness = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Brightness"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Brightness, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_CloudVisibilityRT = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CloudVisibilityRT"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CloudVisibilityRT, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
				UProperty* NewProp_CloudShadowRT = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CloudShadowRT"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CloudShadowRT, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
				UProperty* NewProp_LossRT = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("LossRT"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(LossRT, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
				UProperty* NewProp_InscatterRT = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InscatterRT"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(InscatterRT, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTextureRenderTarget2D_NoRegister());
				UProperty* NewProp_RainCubemap = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RainCubemap"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RainCubemap, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTexture_NoRegister());
				UProperty* NewProp_CosmicBackgroundTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CosmicBackgroundTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CosmicBackgroundTexture, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_MoonTexture = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MoonTexture"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MoonTexture, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTexture2D_NoRegister());
				UProperty* NewProp_ActiveSequence = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveSequence"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ActiveSequence, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UClass_UTrueSkySequenceAsset_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(ActiveInEditor, ATrueSkySequenceActor, bool);
				UProperty* NewProp_ActiveInEditor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ActiveInEditor"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ActiveInEditor, ATrueSkySequenceActor), 0x0010000000000001, CPP_BOOL_PROPERTY_BITMASK(ActiveInEditor, ATrueSkySequenceActor), sizeof(bool), true);
				UProperty* NewProp_MaxSunRadiance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MaxSunRadiance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MaxSunRadiance, ATrueSkySequenceActor), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(SimulationTime, ATrueSkySequenceActor, bool);
				UProperty* NewProp_SimulationTime = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SimulationTime"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(SimulationTime, ATrueSkySequenceActor), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(SimulationTime, ATrueSkySequenceActor), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(VelocityStreaks, ATrueSkySequenceActor, bool);
				UProperty* NewProp_VelocityStreaks = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("VelocityStreaks"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(VelocityStreaks, ATrueSkySequenceActor), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(VelocityStreaks, ATrueSkySequenceActor), sizeof(bool), true);
				UProperty* NewProp_InterpolationTimeSeconds = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpolationTimeSeconds"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(InterpolationTimeSeconds, ATrueSkySequenceActor), 0x0010000000000005);
				UProperty* NewProp_InterpolationMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("InterpolationMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InterpolationMode, ATrueSkySequenceActor), 0x0010000000000005, Z_Construct_UEnum_TrueSkyPlugin_EInterpolationMode());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_CloudLineTest(), "CloudLineTest"); // 1847106544
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_CloudPointTest(), "CloudPointTest"); // 3376503004
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudKeyframeByIndex(), "GetCloudKeyframeByIndex"); // 1499471070
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetCloudShadowAtPosition(), "GetCloudShadowAtPosition"); // 2497588112
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetFloat(), "GetFloat"); // 2061276467
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetFloatAtPosition(), "GetFloatAtPosition"); // 317709308
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetInt(), "GetInt"); // 2856671897
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedCloudKeyframe(), "GetInterpolatedCloudKeyframe"); // 1596343253
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetInterpolatedSkyKeyframe(), "GetInterpolatedSkyKeyframe"); // 3538591231
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeFloat(), "GetKeyframeFloat"); // 1570091092
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetKeyframeInt(), "GetKeyframeInt"); // 3026420577
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetLightning(), "GetLightning"); // 2125473913
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetMetresPerUnit(), "GetMetresPerUnit"); // 966395816
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonColor(), "GetMoonColor"); // 169262427
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonIntensity(), "GetMoonIntensity"); // 3069744819
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetMoonRotation(), "GetMoonRotation"); // 3863736521
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextCloudKeyframeAfterTime(), "GetNextCloudKeyframeAfterTime"); // 4236047398
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableCloudKeyframe(), "GetNextModifiableCloudKeyframe"); // 1178912271
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextModifiableSkyKeyframe(), "GetNextModifiableSkyKeyframe"); // 200081340
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetNextSkyKeyframeAfterTime(), "GetNextSkyKeyframeAfterTime"); // 2953441455
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousCloudKeyframeBeforeTime(), "GetPreviousCloudKeyframeBeforeTime"); // 2851431912
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetPreviousSkyKeyframeBeforeTime(), "GetPreviousSkyKeyframeBeforeTime"); // 777597615
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetProfilingText(), "GetProfilingText"); // 2728036957
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetRainAtPosition(), "GetRainAtPosition"); // 1339472196
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetReferenceSpectralRadiance(), "GetReferenceSpectralRadiance"); // 3599895767
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetSkyKeyframeByIndex(), "GetSkyKeyframeByIndex"); // 2206127839
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetSunColor(), "GetSunColor"); // 816962286
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetSunIntensity(), "GetSunIntensity"); // 2635147147
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetSunRotation(), "GetSunRotation"); // 1591623648
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_GetTime(), "GetTime"); // 2404191506
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetBool(), "SetBool"); // 623678996
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetFloat(), "SetFloat"); // 2599162350
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetInt(), "SetInt"); // 301533914
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeFloat(), "SetKeyframeFloat"); // 4118598760
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetKeyframeInt(), "SetKeyframeInt"); // 2096791005
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetMoonRotation(), "SetMoonRotation"); // 4033943118
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLight(), "SetPointLight"); // 2979716051
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetPointLightSource(), "SetPointLightSource"); // 3335898075
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetSunRotation(), "SetSunRotation"); // 1534563681
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SetTime(), "SetTime"); // 3682624884
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ATrueSkySequenceActor_SpawnLightning(), "SpawnLightning"); // 2751518450
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TrueSkySequenceActor.h"));
				MetaData->SetValue(OuterClass, TEXT("IsBlueprintBase"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("example\n enum class ETestType : uint8\n {\n     None                = 0            UMETA(DisplayName=\"None\"),\n     Left                = 0x1        UMETA(DisplayName=\" Left\"),\n     Right                = 0x2        UMETA(DisplayName=\" Right\"),\n };\n\n ENUM_CLASS_FLAGS(ETestType);\n\n  UPROPERTY()\n TEnumAsByte<EnumName> VarName;\n//hideCategories=(Actor, Advanced, Display, Object, Attachment, Movement, Collision, Rendering, Input),"));
				MetaData->SetValue(NewProp_ThunderAttenuation, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_ThunderAttenuation, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_ThunderSounds, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_ThunderSounds, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_RainSound, TEXT("Category"), TEXT("Sound"));
				MetaData->SetValue(NewProp_RainSound, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_Visible, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_Visible, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_ShareBuffersForVR, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_ShareBuffersForVR, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_MinimumStarPixelSize, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_MinimumStarPixelSize, TEXT("EditCondition"), TEXT("bSimulVersion4_1"));
				MetaData->SetValue(NewProp_MinimumStarPixelSize, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_MinimumStarPixelSize, TEXT("ToolTip"), TEXT("The smallest size stars can be drawn. If zero they are drawn as points, otherwise as quads. Use this to compensate for artifacts caused by antialiasing."));
				MetaData->SetValue(NewProp_DepthBlending, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_DepthBlending, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_DepthBlending, TEXT("ToolTip"), TEXT("Tells trueSKY whether to blend clouds with scenery, or to draw them in front/behind depending on altitude."));
				MetaData->SetValue(NewProp_AtmosphericsAmortization, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_AtmosphericsAmortization, TEXT("ClampMax"), TEXT("8"));
				MetaData->SetValue(NewProp_AtmosphericsAmortization, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_AtmosphericsAmortization, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_AtmosphericsAmortization, TEXT("ToolTip"), TEXT("Tells trueSKY how to spread the cost of rendering atmospherics over frames."));
				MetaData->SetValue(NewProp_Amortization, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_Amortization, TEXT("ClampMax"), TEXT("8"));
				MetaData->SetValue(NewProp_Amortization, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_Amortization, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_Amortization, TEXT("ToolTip"), TEXT("Tells trueSKY how to spread the cost of rendering over frames. For 1, all pixels are drawn every frame, for amortization 2, it's 2x2, etc."));
				MetaData->SetValue(NewProp_DepthSamplingPixelRange, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_DepthSamplingPixelRange, TEXT("ClampMax"), TEXT("4.0"));
				MetaData->SetValue(NewProp_DepthSamplingPixelRange, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_DepthSamplingPixelRange, TEXT("EditCondition"), TEXT("bSimulVersion4_1"));
				MetaData->SetValue(NewProp_DepthSamplingPixelRange, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_DepthSamplingPixelRange, TEXT("ToolTip"), TEXT("The size, in pixels, of the sampling area in the full-resolution depth buffer, which is used to find near/far depths."));
				MetaData->SetValue(NewProp_MaximumResolution, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_MaximumResolution, TEXT("ClampMax"), TEXT("2048"));
				MetaData->SetValue(NewProp_MaximumResolution, TEXT("ClampMin"), TEXT("16"));
				MetaData->SetValue(NewProp_MaximumResolution, TEXT("EditCondition"), TEXT("bSimulVersion4_1"));
				MetaData->SetValue(NewProp_MaximumResolution, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_MaximumResolution, TEXT("ToolTip"), TEXT("The largest cubemap resolution to be used for cloud rendering. Typically 1/4 of the screen width, larger values are more expensive in time and memory."));
				MetaData->SetValue(NewProp_DownscaleFactor, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_DownscaleFactor, TEXT("ClampMax"), TEXT("4"));
				MetaData->SetValue(NewProp_DownscaleFactor, TEXT("ClampMin"), TEXT("1"));
				MetaData->SetValue(NewProp_DownscaleFactor, TEXT("EditCondition"), TEXT("!bSimulVersion4_1"));
				MetaData->SetValue(NewProp_DownscaleFactor, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_DownscaleFactor, TEXT("ToolTip"), TEXT("Deprecated. Instead, use MaximumResolution. Tells trueSKY how much to downscale resolution for cloud rendering. The scaling is 2^downscaleFactor."));
				MetaData->SetValue(NewProp_CloudThresholdDistanceKm, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_CloudThresholdDistanceKm, TEXT("ClampMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_CloudThresholdDistanceKm, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_CloudThresholdDistanceKm, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_CloudThresholdDistanceKm, TEXT("ToolTip"), TEXT("A heuristic distance to discard near depths from depth interpolation, improving accuracy of upscaling."));
				MetaData->SetValue(NewProp_SimpleCloudShadowSharpness, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_SimpleCloudShadowSharpness, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_SimpleCloudShadowSharpness, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_SimpleCloudShadowSharpness, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_SimpleCloudShadowSharpness, TEXT("ToolTip"), TEXT("Tells trueSKY how sharp to make the shadow boundaries."));
				MetaData->SetValue(NewProp_SimpleCloudShadowing, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_SimpleCloudShadowing, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_SimpleCloudShadowing, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_SimpleCloudShadowing, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_SimpleCloudShadowing, TEXT("ToolTip"), TEXT("Tells trueSKY whether and to what extent to apply cloud shadows to the scene in post-processing."));
				MetaData->SetValue(NewProp_MetresPerUnit, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_MetresPerUnit, TEXT("ClampMax"), TEXT("1000.0"));
				MetaData->SetValue(NewProp_MetresPerUnit, TEXT("ClampMin"), TEXT("0.001"));
				MetaData->SetValue(NewProp_MetresPerUnit, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_MetresPerUnit, TEXT("ToolTip"), TEXT("Tells trueSKY how many metres there are in a single UE4 distance unit. Typically 0.1 (10cm per unit)."));
				MetaData->SetValue(NewProp_Brightness, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ClampMax"), TEXT("10.0"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ClampMin"), TEXT("0.1"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_Brightness, TEXT("ToolTip"), TEXT("A multiplier for brightness of the trueSKY environment, 1.0 by default."));
				MetaData->SetValue(NewProp_CloudVisibilityRT, TEXT("Category"), TEXT("TrueSkyTextures"));
				MetaData->SetValue(NewProp_CloudVisibilityRT, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_CloudVisibilityRT, TEXT("ToolTip"), TEXT("The render texture to fill in with atmospheric loss values."));
				MetaData->SetValue(NewProp_CloudShadowRT, TEXT("Category"), TEXT("TrueSkyTextures"));
				MetaData->SetValue(NewProp_CloudShadowRT, TEXT("EditCondition"), TEXT("bSimulVersion4_1"));
				MetaData->SetValue(NewProp_CloudShadowRT, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_CloudShadowRT, TEXT("ToolTip"), TEXT("The render texture to fill in with the cloud shadow."));
				MetaData->SetValue(NewProp_LossRT, TEXT("Category"), TEXT("TrueSkyTextures"));
				MetaData->SetValue(NewProp_LossRT, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_LossRT, TEXT("ToolTip"), TEXT("The render texture to fill in with atmospheric loss values."));
				MetaData->SetValue(NewProp_InscatterRT, TEXT("Category"), TEXT("TrueSkyTextures"));
				MetaData->SetValue(NewProp_InscatterRT, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_InscatterRT, TEXT("ToolTip"), TEXT("The render texture to fill in with atmospheric inscatter values."));
				MetaData->SetValue(NewProp_RainCubemap, TEXT("Category"), TEXT("TrueSkyTextures"));
				MetaData->SetValue(NewProp_RainCubemap, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_RainCubemap, TEXT("ToolTip"), TEXT("If set, trueSKY will use this cubemap to light the rain, otherwise a TrueSkyLight will be used."));
				MetaData->SetValue(NewProp_CosmicBackgroundTexture, TEXT("Category"), TEXT("TrueSkyTextures"));
				MetaData->SetValue(NewProp_CosmicBackgroundTexture, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_CosmicBackgroundTexture, TEXT("ToolTip"), TEXT("The texture to draw for the cosmic background - e.g. the Milky Way."));
				MetaData->SetValue(NewProp_MoonTexture, TEXT("Category"), TEXT("TrueSkyTextures"));
				MetaData->SetValue(NewProp_MoonTexture, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_MoonTexture, TEXT("ToolTip"), TEXT("The texture to draw for the moon."));
				MetaData->SetValue(NewProp_ActiveSequence, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_ActiveSequence, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_ActiveSequence, TEXT("ToolTip"), TEXT("What is the current active sequence for this actor?"));
				MetaData->SetValue(NewProp_ActiveInEditor, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_ActiveInEditor, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_ActiveInEditor, TEXT("ToolTip"), TEXT("When multiple trueSKY Sequence Actors are present in a level, the active one is selected using this checkbox."));
				MetaData->SetValue(NewProp_MaxSunRadiance, TEXT("Category"), TEXT("TrueSky"));
				MetaData->SetValue(NewProp_MaxSunRadiance, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_MaxSunRadiance, TEXT("ToolTip"), TEXT("The maximum sun brightness to be rendered by trueSKY, in radiance units."));
				MetaData->SetValue(NewProp_SimulationTime, TEXT("Category"), TEXT("Precipitation"));
				MetaData->SetValue(NewProp_SimulationTime, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_VelocityStreaks, TEXT("Category"), TEXT("Precipitation"));
				MetaData->SetValue(NewProp_VelocityStreaks, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_InterpolationTimeSeconds, TEXT("Category"), TEXT("Interpolation"));
				MetaData->SetValue(NewProp_InterpolationTimeSeconds, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_InterpolationTimeSeconds, TEXT("ToolTip"), TEXT("The time for real time interpolation in seconds. Used from trueSKY 4.1 onwards."));
				MetaData->SetValue(NewProp_InterpolationMode, TEXT("Category"), TEXT("Interpolation"));
				MetaData->SetValue(NewProp_InterpolationMode, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceActor.h"));
				MetaData->SetValue(NewProp_InterpolationMode, TEXT("ToolTip"), TEXT("The method to use for interpolation. Used from trueSKY 4.1 onwards."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ATrueSkySequenceActor(Z_Construct_UClass_ATrueSkySequenceActor, &ATrueSkySequenceActor::StaticClass, TEXT("ATrueSkySequenceActor"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ATrueSkySequenceActor);
	UClass* Z_Construct_UClass_UTrueSkySequenceAsset_NoRegister()
	{
		return UTrueSkySequenceAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_UTrueSkySequenceAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_TrueSkyPlugin();
			OuterClass = UTrueSkySequenceAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20080080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SequenceText = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SequenceText"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(SequenceText, UTrueSkySequenceAsset), 0x0010000000000000);
				UProperty* NewProp_SequenceText_Inner = new(EC_InternalUseOnlyConstructor, NewProp_SequenceText, TEXT("SequenceText"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("TrueSkySequenceAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceAsset.h"));
				MetaData->SetValue(NewProp_SequenceText, TEXT("ModuleRelativePath"), TEXT("Classes/TrueSkySequenceAsset.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTrueSkySequenceAsset(Z_Construct_UClass_UTrueSkySequenceAsset, &UTrueSkySequenceAsset::StaticClass, TEXT("UTrueSkySequenceAsset"), false, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTrueSkySequenceAsset);
	UPackage* Z_Construct_UPackage__Script_TrueSkyPlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/TrueSkyPlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x57C81007;
			Guid.B = 0x4DB446E9;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
